function __init__ks_1d()
    DEPNAME = "KuramotoSivashinsky1D"
    
    register(DataDep(
        DEPNAME,
        """
        Dataset: One-dimensional output generated by solving the Kuramoto-Sivashinsky problem in 1D.
        Authors: Climate Modeling Alliance
        Website: N/A
        """,
        ["https://caltech.box.com/shared/static/ue50o4bj93suqk0tcs43xij26yxd1zaj.hdf5",],
    ))
end

"""
    KuramotoSivashinsky1D <: MLDatasets.UnsupervisedDataset

A dataset consisting of 1d fields generated by solving the Kuramoto-Sivashinsky equation in one spatial dimension.
The field is saved every dt_save during the numerical integration, and has 
not been shuffled in time.

Authors: Climate Modeling Alliance
"""
struct KuramotoSivashinsky1D <: MLDatasets.UnsupervisedDataset
    metadata::Dict{String,Any}
    split::Symbol
    n_pixels::Int
    n_time::Int
    features::Array{}
end

"""
Creates the KuramotoSivashinsky1D dataset, 
images of size n_pixels x n_time, given

- split: :train or :test
- f: fraction of data desired
- Tx: the float type. The dataset was created using Float32
- n_pixels: the number of nodes in the spatial dimension
                       Only 128 is supported currently.
- n_time: the number of time samples to use when creating the 2d ``images".
"""
function KuramotoSivashinsky1D(split::Symbol; f = 1.0, Tx = Float32, n_pixels = 128, n_time = 128)
    # checks
    @assert n_pixels ∈ [128,]
    @assert split ∈ [:train, :test]

    DEPNAME = "KuramotoSivashinsky1D"
    HDF5FILE = "kuramoto_sivashinksy.hdf5"

    # local path extraction
    features_path = MLDatasets.datafile(DEPNAME, HDF5FILE, nothing)

    # loading
    fid = h5open(features_path, "r")
    # For now, these are our only options. If we expand, they will become kwargs
    nx = 128
    Lx = 100
    dt = 0.1
    dt_save = 0.2
    # Autocorrelation time: specific to dataset
    τ = 10.0
    features = read(fid, string("nx_$nx","Lx_$Lx","dt_$dt","dt_save_$dt_save"))
    close(fid)
    
    n_observations = size(features)[end]
    # compute the number we want to keep based on the fraction of the data we want to use
    n_keep = Int(round(n_observations*f))
    # Cut and reshape into n_pixels x n_time images
    n_data = div(n_keep, n_time, RoundDown)
    features = reshape(features[:,1:n_data*n_time], (n_pixels, n_time, 1, n_data))
    # splitting
    if split == :train
        features, _ = MLUtils.splitobs(features, at=0.8)
    elseif split == :test
        _, features = MLUtils.splitobs(features, at=0.8)
    end
    
    # useful side information
    metadata = Dict{String,Any}()
    metadata["n_data"] = n_data
    metadata["Lx"] = Lx
    metadata["nx"] = nx
    metadata["dt"] = dt
    metadata["dt_save"] = dt_save
    metadata["τ"] = τ

    return KuramotoSivashinsky1D(metadata, split, n_pixels, n_time, Tx.(features))
end
